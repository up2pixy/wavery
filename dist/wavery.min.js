var Wavery=function(r){var t={};function e(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return r[n].call(a.exports,a,a.exports,e),a.l=!0,a.exports}return e.m=r,e.c=t,e.d=function(r,t,n){e.o(r,t)||Object.defineProperty(r,t,{enumerable:!0,get:n})},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},e.t=function(r,t){if(1&t&&(r=e(r)),8&t)return r;if(4&t&&"object"==typeof r&&r&&r.__esModule)return r;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:r}),2&t&&"string"!=typeof r)for(var a in r)e.d(n,a,function(t){return r[t]}.bind(null,a));return n},e.n=function(r){var t=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(t,"a",t),t},e.o=function(r,t){return Object.prototype.hasOwnProperty.call(r,t)},e.p="",e(e.s=1)}([function(r,t,e){
/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2019, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */
r.exports=function(){"use strict";for(var r=function(r,t,e){return void 0===t&&(t=0),void 0===e&&(e=1),r<t?t:r>e?e:r},t={},e=0,n=["Boolean","Number","String","Function","Array","Date","RegExp","Undefined","Null"];e<n.length;e+=1){var a=n[e];t["[object "+a+"]"]=a.toLowerCase()}var f=function(r){return t[Object.prototype.toString.call(r)]||"object"},o=Math.PI,u={clip_rgb:function(t){t._clipped=!1,t._unclipped=t.slice(0);for(var e=0;e<=3;e++)e<3?((t[e]<0||t[e]>255)&&(t._clipped=!0),t[e]=r(t[e],0,255)):3===e&&(t[e]=r(t[e],0,1));return t},limit:r,type:f,unpack:function(r,t){return void 0===t&&(t=null),r.length>=3?Array.prototype.slice.call(r):"object"==f(r[0])&&t?t.split("").filter(function(t){return void 0!==r[0][t]}).map(function(t){return r[0][t]}):r[0]},last:function(r){if(r.length<2)return null;var t=r.length-1;return"string"==f(r[t])?r[t].toLowerCase():null},PI:o,TWOPI:2*o,PITHIRD:o/3,DEG2RAD:o/180,RAD2DEG:180/o},c={format:{},autodetect:[]},i=u.last,l=u.clip_rgb,s=u.type,h=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=this;if("object"===s(r[0])&&r[0].constructor&&r[0].constructor===this.constructor)return r[0];var n=i(r),a=!1;if(!n){a=!0,c.sorted||(c.autodetect=c.autodetect.sort(function(r,t){return t.p-r.p}),c.sorted=!0);for(var f=0,o=c.autodetect;f<o.length;f+=1){var u=o[f];if(n=u.test.apply(u,r))break}}if(!c.format[n])throw new Error("unknown format: "+r);var h=c.format[n].apply(null,a?r:r.slice(0,-1));e._rgb=l(h),3===e._rgb.length&&e._rgb.push(1)};h.prototype.toString=function(){return"function"==s(this.hex)?this.hex():"["+this._rgb.join(",")+"]"};var d=h,b=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(b.Color,[null].concat(r)))};b.Color=d,b.version="2.0.4";var p=b,g=u.unpack,v=Math.max,m=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=g(r,"rgb"),n=e[0],a=e[1],f=e[2],o=1-v(n/=255,v(a/=255,f/=255)),u=o<1?1/(1-o):0,c=(1-n-o)*u,i=(1-a-o)*u,l=(1-f-o)*u;return[c,i,l,o]},y=u.unpack,w=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=(r=y(r,"cmyk"))[0],n=r[1],a=r[2],f=r[3],o=r.length>4?r[4]:1;return 1===f?[0,0,0,o]:[e>=1?0:255*(1-e)*(1-f),n>=1?0:255*(1-n)*(1-f),a>=1?0:255*(1-a)*(1-f),o]},k=u.unpack,M=u.type;d.prototype.cmyk=function(){return m(this._rgb)},p.cmyk=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["cmyk"])))},c.format.cmyk=w,c.autodetect.push({p:2,test:function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(r=k(r,"cmyk"),"array"===M(r)&&4===r.length)return"cmyk"}});var N=u.unpack,_=u.last,x=function(r){return Math.round(100*r)/100},A=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=N(r,"hsla"),n=_(r)||"lsa";return e[0]=x(e[0]||0),e[1]=x(100*e[1])+"%",e[2]=x(100*e[2])+"%","hsla"===n||e.length>3&&e[3]<1?(e[3]=e.length>3?e[3]:1,n="hsla"):e.length=3,n+"("+e.join(",")+")"},O=u.unpack,P=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=(r=O(r,"rgba"))[0],n=r[1],a=r[2];e/=255,n/=255,a/=255;var f,o,u=Math.min(e,n,a),c=Math.max(e,n,a),i=(c+u)/2;return c===u?(f=0,o=Number.NaN):f=i<.5?(c-u)/(c+u):(c-u)/(2-c-u),e==c?o=(n-a)/(c-u):n==c?o=2+(a-e)/(c-u):a==c&&(o=4+(e-n)/(c-u)),(o*=60)<0&&(o+=360),r.length>3&&void 0!==r[3]?[o,f,i,r[3]]:[o,f,i]},j=u.unpack,C=u.last,E=Math.round,S=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=j(r,"rgba"),n=C(r)||"rgb";return"hsl"==n.substr(0,3)?A(P(e),n):(e[0]=E(e[0]),e[1]=E(e[1]),e[2]=E(e[2]),("rgba"===n||e.length>3&&e[3]<1)&&(e[3]=e.length>3?e[3]:1,n="rgba"),n+"("+e.slice(0,"rgb"===n?3:4).join(",")+")")},F=u.unpack,G=Math.round,q=function(){for(var r,t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,a,f,o=(t=F(t,"hsl"))[0],u=t[1],c=t[2];if(0===u)n=a=f=255*c;else{var i=[0,0,0],l=[0,0,0],s=c<.5?c*(1+u):c+u-c*u,h=2*c-s,d=o/360;i[0]=d+1/3,i[1]=d,i[2]=d-1/3;for(var b=0;b<3;b++)i[b]<0&&(i[b]+=1),i[b]>1&&(i[b]-=1),6*i[b]<1?l[b]=h+6*(s-h)*i[b]:2*i[b]<1?l[b]=s:3*i[b]<2?l[b]=h+(s-h)*(2/3-i[b])*6:l[b]=h;r=[G(255*l[0]),G(255*l[1]),G(255*l[2])],n=r[0],a=r[1],f=r[2]}return t.length>3?[n,a,f,t[3]]:[n,a,f,1]},L=/^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/,R=/^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/,I=/^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/,B=/^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/,D=/^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/,Y=/^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/,T=Math.round,V=function(r){var t;if(r=r.toLowerCase().trim(),c.format.named)try{return c.format.named(r)}catch(r){}if(t=r.match(L)){for(var e=t.slice(1,4),n=0;n<3;n++)e[n]=+e[n];return e[3]=1,e}if(t=r.match(R)){for(var a=t.slice(1,5),f=0;f<4;f++)a[f]=+a[f];return a}if(t=r.match(I)){for(var o=t.slice(1,4),u=0;u<3;u++)o[u]=T(2.55*o[u]);return o[3]=1,o}if(t=r.match(B)){for(var i=t.slice(1,5),l=0;l<3;l++)i[l]=T(2.55*i[l]);return i[3]=+i[3],i}if(t=r.match(D)){var s=t.slice(1,4);s[1]*=.01,s[2]*=.01;var h=q(s);return h[3]=1,h}if(t=r.match(Y)){var d=t.slice(1,4);d[1]*=.01,d[2]*=.01;var b=q(d);return b[3]=+t[4],b}};V.test=function(r){return L.test(r)||R.test(r)||I.test(r)||B.test(r)||D.test(r)||Y.test(r)};var $=V,W=u.type;d.prototype.css=function(r){return S(this._rgb,r)},p.css=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["css"])))},c.format.css=$,c.autodetect.push({p:5,test:function(r){for(var t=[],e=arguments.length-1;e-- >0;)t[e]=arguments[e+1];if(!t.length&&"string"===W(r)&&$.test(r))return"css"}});var z=u.unpack;c.format.gl=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=z(r,"rgba");return e[0]*=255,e[1]*=255,e[2]*=255,e},p.gl=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["gl"])))},d.prototype.gl=function(){var r=this._rgb;return[r[0]/255,r[1]/255,r[2]/255,r[3]]};var X=u.unpack,U=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e,n=X(r,"rgb"),a=n[0],f=n[1],o=n[2],u=Math.min(a,f,o),c=Math.max(a,f,o),i=c-u,l=100*i/255,s=u/(255-i)*100;return 0===i?e=Number.NaN:(a===c&&(e=(f-o)/i),f===c&&(e=2+(o-a)/i),o===c&&(e=4+(a-f)/i),(e*=60)<0&&(e+=360)),[e,l,s]},Z=u.unpack,K=Math.floor,H=function(){for(var r,t,e,n,a,f,o=[],u=arguments.length;u--;)o[u]=arguments[u];var c,i,l,s=(o=Z(o,"hcg"))[0],h=o[1],d=o[2];d*=255;var b=255*h;if(0===h)c=i=l=d;else{360===s&&(s=0),s>360&&(s-=360),s<0&&(s+=360);var p=K(s/=60),g=s-p,v=d*(1-h),m=v+b*(1-g),y=v+b*g,w=v+b;switch(p){case 0:c=(r=[w,y,v])[0],i=r[1],l=r[2];break;case 1:c=(t=[m,w,v])[0],i=t[1],l=t[2];break;case 2:c=(e=[v,w,y])[0],i=e[1],l=e[2];break;case 3:c=(n=[v,m,w])[0],i=n[1],l=n[2];break;case 4:c=(a=[y,v,w])[0],i=a[1],l=a[2];break;case 5:c=(f=[w,v,m])[0],i=f[1],l=f[2]}}return[c,i,l,o.length>3?o[3]:1]},J=u.unpack,Q=u.type;d.prototype.hcg=function(){return U(this._rgb)},p.hcg=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["hcg"])))},c.format.hcg=H,c.autodetect.push({p:1,test:function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(r=J(r,"hcg"),"array"===Q(r)&&3===r.length)return"hcg"}});var rr=u.unpack,tr=u.last,er=Math.round,nr=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=rr(r,"rgba"),n=e[0],a=e[1],f=e[2],o=e[3],u=tr(r)||"auto";void 0===o&&(o=1),"auto"===u&&(u=o<1?"rgba":"rgb"),n=er(n),a=er(a),f=er(f);var c=n<<16|a<<8|f,i="000000"+c.toString(16);i=i.substr(i.length-6);var l="0"+er(255*o).toString(16);switch(l=l.substr(l.length-2),u.toLowerCase()){case"rgba":return"#"+i+l;case"argb":return"#"+l+i;default:return"#"+i}},ar=/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,fr=/^#?([A-Fa-f0-9]{8})$/,or=function(r){if(r.match(ar)){4!==r.length&&7!==r.length||(r=r.substr(1)),3===r.length&&(r=(r=r.split(""))[0]+r[0]+r[1]+r[1]+r[2]+r[2]);var t=parseInt(r,16),e=t>>16,n=t>>8&255,a=255&t;return[e,n,a,1]}if(r.match(fr)){9===r.length&&(r=r.substr(1));var f=parseInt(r,16),o=f>>24&255,u=f>>16&255,c=f>>8&255,i=Math.round((255&f)/255*100)/100;return[o,u,c,i]}throw new Error("unknown hex color: "+r)},ur=u.type;d.prototype.hex=function(r){return nr(this._rgb,r)},p.hex=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["hex"])))},c.format.hex=or,c.autodetect.push({p:4,test:function(r){for(var t=[],e=arguments.length-1;e-- >0;)t[e]=arguments[e+1];if(!t.length&&"string"===ur(r)&&[3,4,6,7,8,9].includes(r.length))return"hex"}});var cr=u.unpack,ir=u.TWOPI,lr=Math.min,sr=Math.sqrt,hr=Math.acos,dr=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e,n=cr(r,"rgb"),a=n[0],f=n[1],o=n[2],u=lr(a/=255,f/=255,o/=255),c=(a+f+o)/3,i=c>0?1-u/c:0;return 0===i?e=NaN:(e=(a-f+(a-o))/2,e/=sr((a-f)*(a-f)+(a-o)*(f-o)),e=hr(e),o>f&&(e=ir-e),e/=ir),[360*e,i,c]},br=u.unpack,pr=u.limit,gr=u.TWOPI,vr=u.PITHIRD,mr=Math.cos,yr=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e,n,a,f=(r=br(r,"hsi"))[0],o=r[1],u=r[2];return isNaN(f)&&(f=0),isNaN(o)&&(o=0),f>360&&(f-=360),f<0&&(f+=360),(f/=360)<1/3?(a=(1-o)/3,e=(1+o*mr(gr*f)/mr(vr-gr*f))/3,n=1-(a+e)):f<2/3?(e=(1-o)/3,n=(1+o*mr(gr*(f-=1/3))/mr(vr-gr*f))/3,a=1-(e+n)):(n=(1-o)/3,a=(1+o*mr(gr*(f-=2/3))/mr(vr-gr*f))/3,e=1-(n+a)),e=pr(u*e*3),n=pr(u*n*3),a=pr(u*a*3),[255*e,255*n,255*a,r.length>3?r[3]:1]},wr=u.unpack,kr=u.type;d.prototype.hsi=function(){return dr(this._rgb)},p.hsi=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["hsi"])))},c.format.hsi=yr,c.autodetect.push({p:2,test:function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(r=wr(r,"hsi"),"array"===kr(r)&&3===r.length)return"hsi"}});var Mr=u.unpack,Nr=u.type;d.prototype.hsl=function(){return P(this._rgb)},p.hsl=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["hsl"])))},c.format.hsl=q,c.autodetect.push({p:2,test:function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(r=Mr(r,"hsl"),"array"===Nr(r)&&3===r.length)return"hsl"}});var _r=u.unpack,xr=Math.min,Ar=Math.max,Or=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e,n,a,f=(r=_r(r,"rgb"))[0],o=r[1],u=r[2],c=xr(f,o,u),i=Ar(f,o,u),l=i-c;return a=i/255,0===i?(e=Number.NaN,n=0):(n=l/i,f===i&&(e=(o-u)/l),o===i&&(e=2+(u-f)/l),u===i&&(e=4+(f-o)/l),(e*=60)<0&&(e+=360)),[e,n,a]},Pr=u.unpack,jr=Math.floor,Cr=function(){for(var r,t,e,n,a,f,o=[],u=arguments.length;u--;)o[u]=arguments[u];var c,i,l,s=(o=Pr(o,"hsv"))[0],h=o[1],d=o[2];if(d*=255,0===h)c=i=l=d;else{360===s&&(s=0),s>360&&(s-=360),s<0&&(s+=360);var b=jr(s/=60),p=s-b,g=d*(1-h),v=d*(1-h*p),m=d*(1-h*(1-p));switch(b){case 0:c=(r=[d,m,g])[0],i=r[1],l=r[2];break;case 1:c=(t=[v,d,g])[0],i=t[1],l=t[2];break;case 2:c=(e=[g,d,m])[0],i=e[1],l=e[2];break;case 3:c=(n=[g,v,d])[0],i=n[1],l=n[2];break;case 4:c=(a=[m,g,d])[0],i=a[1],l=a[2];break;case 5:c=(f=[d,g,v])[0],i=f[1],l=f[2]}}return[c,i,l,o.length>3?o[3]:1]},Er=u.unpack,Sr=u.type;d.prototype.hsv=function(){return Or(this._rgb)},p.hsv=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["hsv"])))},c.format.hsv=Cr,c.autodetect.push({p:2,test:function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(r=Er(r,"hsv"),"array"===Sr(r)&&3===r.length)return"hsv"}});var Fr={Kn:18,Xn:.95047,Yn:1,Zn:1.08883,t0:.137931034,t1:.206896552,t2:.12841855,t3:.008856452},Gr=u.unpack,qr=Math.pow,Lr=function(r){return(r/=255)<=.04045?r/12.92:qr((r+.055)/1.055,2.4)},Rr=function(r){return r>Fr.t3?qr(r,1/3):r/Fr.t2+Fr.t0},Ir=function(r,t,e){r=Lr(r),t=Lr(t),e=Lr(e);var n=Rr((.4124564*r+.3575761*t+.1804375*e)/Fr.Xn),a=Rr((.2126729*r+.7151522*t+.072175*e)/Fr.Yn),f=Rr((.0193339*r+.119192*t+.9503041*e)/Fr.Zn);return[n,a,f]},Br=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=Gr(r,"rgb"),n=e[0],a=e[1],f=e[2],o=Ir(n,a,f),u=o[0],c=o[1],i=o[2],l=116*c-16;return[l<0?0:l,500*(u-c),200*(c-i)]},Dr=u.unpack,Yr=Math.pow,Tr=function(r){return 255*(r<=.00304?12.92*r:1.055*Yr(r,1/2.4)-.055)},Vr=function(r){return r>Fr.t1?r*r*r:Fr.t2*(r-Fr.t0)},$r=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e,n,a,f,o,u,c=(r=Dr(r,"lab"))[0],i=r[1],l=r[2];return n=(c+16)/116,e=isNaN(i)?n:n+i/500,a=isNaN(l)?n:n-l/200,n=Fr.Yn*Vr(n),e=Fr.Xn*Vr(e),a=Fr.Zn*Vr(a),f=Tr(3.2404542*e-1.5371385*n-.4985314*a),o=Tr(-.969266*e+1.8760108*n+.041556*a),u=Tr(.0556434*e-.2040259*n+1.0572252*a),[f,o,u,r.length>3?r[3]:1]},Wr=u.unpack,zr=u.type;d.prototype.lab=function(){return Br(this._rgb)},p.lab=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["lab"])))},c.format.lab=$r,c.autodetect.push({p:2,test:function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(r=Wr(r,"lab"),"array"===zr(r)&&3===r.length)return"lab"}});var Xr=u.unpack,Ur=u.RAD2DEG,Zr=Math.sqrt,Kr=Math.atan2,Hr=Math.round,Jr=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=Xr(r,"lab"),n=e[0],a=e[1],f=e[2],o=Zr(a*a+f*f),u=(Kr(f,a)*Ur+360)%360;return 0===Hr(1e4*o)&&(u=Number.NaN),[n,o,u]},Qr=u.unpack,rt=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=Qr(r,"rgb"),n=e[0],a=e[1],f=e[2],o=Br(n,a,f),u=o[0],c=o[1],i=o[2];return Jr(u,c,i)},tt=u.unpack,et=u.DEG2RAD,nt=Math.sin,at=Math.cos,ft=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=tt(r,"lch"),n=e[0],a=e[1],f=e[2];return isNaN(f)&&(f=0),[n,at(f*=et)*a,nt(f)*a]},ot=u.unpack,ut=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=(r=ot(r,"lch"))[0],n=r[1],a=r[2],f=ft(e,n,a),o=f[0],u=f[1],c=f[2],i=$r(o,u,c),l=i[0],s=i[1],h=i[2];return[l,s,h,r.length>3?r[3]:1]},ct=u.unpack,it=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=ct(r,"hcl").reverse();return ut.apply(void 0,e)},lt=u.unpack,st=u.type;d.prototype.lch=function(){return rt(this._rgb)},d.prototype.hcl=function(){return rt(this._rgb).reverse()},p.lch=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["lch"])))},p.hcl=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["hcl"])))},c.format.lch=ut,c.format.hcl=it,["lch","hcl"].forEach(function(r){return c.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=lt(t,r),"array"===st(t)&&3===t.length)return r}})});var ht={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflower:"#6495ed",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",laserlemon:"#ffff54",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrod:"#fafad2",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",maroon2:"#7f0000",maroon3:"#b03060",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",purple2:"#7f007f",purple3:"#a020f0",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},dt=u.type;d.prototype.name=function(){for(var r=nr(this._rgb,"rgb"),t=0,e=Object.keys(ht);t<e.length;t+=1){var n=e[t];if(ht[n]===r)return n.toLowerCase()}return r},c.format.named=function(r){if(r=r.toLowerCase(),ht[r])return or(ht[r]);throw new Error("unknown color name: "+r)},c.autodetect.push({p:5,test:function(r){for(var t=[],e=arguments.length-1;e-- >0;)t[e]=arguments[e+1];if(!t.length&&"string"===dt(r)&&ht[r.toLowerCase()])return"named"}});var bt=u.unpack,pt=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=bt(r,"rgb"),n=e[0],a=e[1],f=e[2];return(n<<16)+(a<<8)+f},gt=u.type,vt=function(r){if("number"==gt(r)&&r>=0&&r<=16777215){var t=r>>16,e=r>>8&255,n=255&r;return[t,e,n,1]}throw new Error("unknown num color: "+r)},mt=u.type;d.prototype.num=function(){return pt(this._rgb)},p.num=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["num"])))},c.format.num=vt,c.autodetect.push({p:5,test:function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(1===r.length&&"number"===mt(r[0])&&r[0]>=0&&r[0]<=16777215)return"num"}});var yt=u.unpack,wt=u.type,kt=Math.round;d.prototype.rgb=function(r){return void 0===r&&(r=!0),!1===r?this._rgb.slice(0,3):this._rgb.slice(0,3).map(kt)},d.prototype.rgba=function(r){return void 0===r&&(r=!0),this._rgb.slice(0,4).map(function(t,e){return e<3?!1===r?t:kt(t):t})},p.rgb=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["rgb"])))},c.format.rgb=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];var e=yt(r,"rgba");return void 0===e[3]&&(e[3]=1),e},c.autodetect.push({p:3,test:function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(r=yt(r,"rgba"),"array"===wt(r)&&(3===r.length||4===r.length&&"number"==wt(r[3])&&r[3]>=0&&r[3]<=1))return"rgb"}});var Mt=Math.log,Nt=function(r){var t,e,n,a=r/100;return a<66?(t=255,e=-155.25485562709179-.44596950469579133*(e=a-2)+104.49216199393888*Mt(e),n=a<20?0:.8274096064007395*(n=a-10)-254.76935184120902+115.67994401066147*Mt(n)):(t=351.97690566805693+.114206453784165*(t=a-55)-40.25366309332127*Mt(t),e=325.4494125711974+.07943456536662342*(e=a-50)-28.0852963507957*Mt(e),n=255),[t,e,n,1]},_t=u.unpack,xt=Math.round,At=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];for(var e,n=_t(r,"rgb"),a=n[0],f=n[2],o=1e3,u=4e4,c=.4;u-o>c;){var i=Nt(e=.5*(u+o));i[2]/i[0]>=f/a?u=e:o=e}return xt(e)};d.prototype.temp=d.prototype.kelvin=d.prototype.temperature=function(){return At(this._rgb)},p.temp=p.kelvin=p.temperature=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return new(Function.prototype.bind.apply(d,[null].concat(r,["temp"])))},c.format.temp=c.format.kelvin=c.format.temperature=Nt;var Ot=u.type;d.prototype.alpha=function(r,t){return void 0===t&&(t=!1),void 0!==r&&"number"===Ot(r)?t?(this._rgb[3]=r,this):new d([this._rgb[0],this._rgb[1],this._rgb[2],r],"rgb"):this._rgb[3]},d.prototype.clipped=function(){return this._rgb._clipped||!1},d.prototype.darken=function(r){void 0===r&&(r=1);var t=this.lab();return t[0]-=Fr.Kn*r,new d(t,"lab").alpha(this.alpha(),!0)},d.prototype.brighten=function(r){return void 0===r&&(r=1),this.darken(-r)},d.prototype.darker=d.prototype.darken,d.prototype.brighter=d.prototype.brighten,d.prototype.get=function(r){var t=r.split("."),e=t[0],n=t[1],a=this[e]();if(n){var f=e.indexOf(n);if(f>-1)return a[f];throw new Error("unknown channel "+n+" in mode "+e)}return a};var Pt=u.type,jt=Math.pow;d.prototype.luminance=function(r){if(void 0!==r&&"number"===Pt(r)){if(0===r)return new d([0,0,0,this._rgb[3]],"rgb");if(1===r)return new d([255,255,255,this._rgb[3]],"rgb");var t=this.luminance(),e=20,n=function(t,a){var f=t.interpolate(a,.5,"rgb"),o=f.luminance();return Math.abs(r-o)<1e-7||!e--?f:o>r?n(t,f):n(f,a)},a=(t>r?n(new d([0,0,0]),this):n(this,new d([255,255,255]))).rgb();return new d(a.concat([this._rgb[3]]))}return Ct.apply(void 0,this._rgb.slice(0,3))};var Ct=function(r,t,e){return r=Et(r),t=Et(t),e=Et(e),.2126*r+.7152*t+.0722*e},Et=function(r){return(r/=255)<=.03928?r/12.92:jt((r+.055)/1.055,2.4)},St={},Ft=u.type,Gt=function(r,t,e){void 0===e&&(e=.5);for(var n=[],a=arguments.length-3;a-- >0;)n[a]=arguments[a+3];var f=n[0]||"lrgb";if(St[f]||n.length||(f=Object.keys(St)[0]),!St[f])throw new Error("interpolation mode "+f+" is not defined");return"object"!==Ft(r)&&(r=new d(r)),"object"!==Ft(t)&&(t=new d(t)),St[f](r,t,e).alpha(r.alpha()+e*(t.alpha()-r.alpha()))};d.prototype.mix=d.prototype.interpolate=function(r,t){void 0===t&&(t=.5);for(var e=[],n=arguments.length-2;n-- >0;)e[n]=arguments[n+2];return Gt.apply(void 0,[this,r,t].concat(e))},d.prototype.premultiply=function(r){void 0===r&&(r=!1);var t=this._rgb,e=t[3];return r?(this._rgb=[t[0]*e,t[1]*e,t[2]*e,e],this):new d([t[0]*e,t[1]*e,t[2]*e,e],"rgb")},d.prototype.saturate=function(r){void 0===r&&(r=1);var t=this.lch();return t[1]+=Fr.Kn*r,t[1]<0&&(t[1]=0),new d(t,"lch").alpha(this.alpha(),!0)},d.prototype.desaturate=function(r){return void 0===r&&(r=1),this.saturate(-r)};var qt=u.type;d.prototype.set=function(r,t,e){void 0===e&&(e=!1);var n=r.split("."),a=n[0],f=n[1],o=this[a]();if(f){var u=a.indexOf(f);if(u>-1){if("string"==qt(t))switch(t.charAt(0)){case"+":case"-":o[u]+=+t;break;case"*":o[u]*=+t.substr(1);break;case"/":o[u]/=+t.substr(1);break;default:o[u]=+t}else{if("number"!==qt(t))throw new Error("unsupported value for Color.set");o[u]=t}var c=new d(o,a);return e?(this._rgb=c._rgb,this):c}throw new Error("unknown channel "+f+" in mode "+a)}return o},St.rgb=function(r,t,e){var n=r._rgb,a=t._rgb;return new d(n[0]+e*(a[0]-n[0]),n[1]+e*(a[1]-n[1]),n[2]+e*(a[2]-n[2]),"rgb")};var Lt=Math.sqrt,Rt=Math.pow;St.lrgb=function(r,t,e){var n=r._rgb,a=n[0],f=n[1],o=n[2],u=t._rgb,c=u[0],i=u[1],l=u[2];return new d(Lt(Rt(a,2)*(1-e)+Rt(c,2)*e),Lt(Rt(f,2)*(1-e)+Rt(i,2)*e),Lt(Rt(o,2)*(1-e)+Rt(l,2)*e),"rgb")},St.lab=function(r,t,e){var n=r.lab(),a=t.lab();return new d(n[0]+e*(a[0]-n[0]),n[1]+e*(a[1]-n[1]),n[2]+e*(a[2]-n[2]),"lab")};var It=function(r,t,e,n){var a,f,o,u,c,i,l,s,h,b,p,g;return"hsl"===n?(o=r.hsl(),u=t.hsl()):"hsv"===n?(o=r.hsv(),u=t.hsv()):"hcg"===n?(o=r.hcg(),u=t.hcg()):"hsi"===n?(o=r.hsi(),u=t.hsi()):"lch"!==n&&"hcl"!==n||(n="hcl",o=r.hcl(),u=t.hcl()),"h"===n.substr(0,1)&&(c=(a=o)[0],l=a[1],h=a[2],i=(f=u)[0],s=f[1],b=f[2]),isNaN(c)||isNaN(i)?isNaN(c)?isNaN(i)?g=Number.NaN:(g=i,1!=h&&0!=h||"hsv"==n||(p=s)):(g=c,1!=b&&0!=b||"hsv"==n||(p=l)):g=c+e*(i>c&&i-c>180?i-(c+360):i<c&&c-i>180?i+360-c:i-c),void 0===p&&(p=l+e*(s-l)),new d([g,p,h+e*(b-h)],n)},Bt=function(r,t,e){return It(r,t,e,"lch")};St.lch=Bt,St.hcl=Bt,St.num=function(r,t,e){var n=r.num(),a=t.num();return new d(n+e*(a-n),"num")},St.hcg=function(r,t,e){return It(r,t,e,"hcg")},St.hsi=function(r,t,e){return It(r,t,e,"hsi")},St.hsl=function(r,t,e){return It(r,t,e,"hsl")},St.hsv=function(r,t,e){return It(r,t,e,"hsv")};var Dt=u.clip_rgb,Yt=Math.pow,Tt=Math.sqrt,Vt=Math.PI,$t=Math.cos,Wt=Math.sin,zt=Math.atan2,Xt=function(r){for(var t=r.length,e=1/t,n=[0,0,0,0],a=0,f=r;a<f.length;a+=1){var o=f[a],u=o._rgb;n[0]+=Yt(u[0],2)*e,n[1]+=Yt(u[1],2)*e,n[2]+=Yt(u[2],2)*e,n[3]+=u[3]*e}return n[0]=Tt(n[0]),n[1]=Tt(n[1]),n[2]=Tt(n[2]),n[3]>.9999999&&(n[3]=1),new d(Dt(n))},Ut=u.type,Zt=Math.pow,Kt=function(r){var t="rgb",e=p("#ccc"),n=0,a=[0,1],f=[],o=[0,0],u=!1,c=[],i=!1,l=0,s=1,h=!1,d={},b=!0,g=1,v=function(r){if((r=r||["#fff","#000"])&&"string"===Ut(r)&&p.brewer&&p.brewer[r.toLowerCase()]&&(r=p.brewer[r.toLowerCase()]),"array"===Ut(r)){1===r.length&&(r=[r[0],r[0]]),r=r.slice(0);for(var t=0;t<r.length;t++)r[t]=p(r[t]);f.length=0;for(var e=0;e<r.length;e++)f.push(e/(r.length-1))}return w(),c=r},m=function(r){return r},y=function(r,n){var a,i;if(null==n&&(n=!1),isNaN(r)||null===r)return e;if(n)i=r;else if(u&&u.length>2){var h=function(r){if(null!=u){for(var t=u.length-1,e=0;e<t&&r>=u[e];)e++;return e-1}return 0}(r);i=h/(u.length-2)}else i=s!==l?(r-l)/(s-l):1;n||(i=m(i)),1!==g&&(i=Zt(i,g)),i=o[0]+i*(1-o[0]-o[1]),i=Math.min(1,Math.max(0,i));var v=Math.floor(1e4*i);if(b&&d[v])a=d[v];else{if("array"===Ut(c))for(var y=0;y<f.length;y++){var w=f[y];if(i<=w){a=c[y];break}if(i>=w&&y===f.length-1){a=c[y];break}if(i>w&&i<f[y+1]){i=(i-w)/(f[y+1]-w),a=p.interpolate(c[y],c[y+1],i,t);break}}else"function"===Ut(c)&&(a=c(i));b&&(d[v]=a)}return a},w=function(){return d={}};v(r);var k=function(r){var t=p(y(r));return i&&t[i]?t[i]():t};return k.classes=function(r){if(null!=r){if("array"===Ut(r))u=r,a=[r[0],r[r.length-1]];else{var t=p.analyze(a);u=0===r?[t.min,t.max]:p.limits(t,"e",r)}return k}return u},k.domain=function(r){if(!arguments.length)return a;l=r[0],s=r[r.length-1],f=[];var t=c.length;if(r.length===t&&l!==s)for(var e=0,n=Array.from(r);e<n.length;e+=1){var o=n[e];f.push((o-l)/(s-l))}else for(var u=0;u<t;u++)f.push(u/(t-1));return a=[l,s],k},k.mode=function(r){return arguments.length?(t=r,w(),k):t},k.range=function(r,t){return v(r),k},k.out=function(r){return i=r,k},k.spread=function(r){return arguments.length?(n=r,k):n},k.correctLightness=function(r){return null==r&&(r=!0),h=r,w(),m=h?function(r){for(var t=y(0,!0).lab()[0],e=y(1,!0).lab()[0],n=t>e,a=y(r,!0).lab()[0],f=t+(e-t)*r,o=a-f,u=0,c=1,i=20;Math.abs(o)>.01&&i-- >0;)n&&(o*=-1),o<0?(u=r,r+=.5*(c-r)):(c=r,r+=.5*(u-r)),a=y(r,!0).lab()[0],o=a-f;return r}:function(r){return r},k},k.padding=function(r){return null!=r?("number"===Ut(r)&&(r=[r,r]),o=r,k):o},k.colors=function(t,e){arguments.length<2&&(e="hex");var n=[];if(0===arguments.length)n=c.slice(0);else if(1===t)n=[k(.5)];else if(t>1){var f=a[0],o=a[1]-f;n=Ht(0,t,!1).map(function(r){return k(f+r/(t-1)*o)})}else{r=[];var i=[];if(u&&u.length>2)for(var l=1,s=u.length,h=1<=s;h?l<s:l>s;h?l++:l--)i.push(.5*(u[l-1]+u[l]));else i=a;n=i.map(function(r){return k(r)})}return p[e]&&(n=n.map(function(r){return r[e]()})),n},k.cache=function(r){return null!=r?(b=r,k):b},k.gamma=function(r){return null!=r?(g=r,k):g},k.nodata=function(r){return null!=r?(e=p(r),k):e},k};function Ht(r,t,e){for(var n=[],a=r<t,f=e?a?t+1:t-1:t,o=r;a?o<f:o>f;a?o++:o--)n.push(o);return n}var Jt=function(r){var t,e,n,a,f,o,u;if(2===(r=r.map(function(r){return new d(r)})).length)t=r.map(function(r){return r.lab()}),f=t[0],o=t[1],a=function(r){var t=[0,1,2].map(function(t){return f[t]+r*(o[t]-f[t])});return new d(t,"lab")};else if(3===r.length)e=r.map(function(r){return r.lab()}),f=e[0],o=e[1],u=e[2],a=function(r){var t=[0,1,2].map(function(t){return(1-r)*(1-r)*f[t]+2*(1-r)*r*o[t]+r*r*u[t]});return new d(t,"lab")};else if(4===r.length){var c;n=r.map(function(r){return r.lab()}),f=n[0],o=n[1],u=n[2],c=n[3],a=function(r){var t=[0,1,2].map(function(t){return(1-r)*(1-r)*(1-r)*f[t]+3*(1-r)*(1-r)*r*o[t]+3*(1-r)*r*r*u[t]+r*r*r*c[t]});return new d(t,"lab")}}else if(5===r.length){var i=Jt(r.slice(0,3)),l=Jt(r.slice(2,5));a=function(r){return r<.5?i(2*r):l(2*(r-.5))}}return a},Qt=function(r,t,e){if(!Qt[e])throw new Error("unknown blend mode "+e);return Qt[e](r,t)},re=function(r){return function(t,e){var n=p(e).rgb(),a=p(t).rgb();return p.rgb(r(n,a))}},te=function(r){return function(t,e){var n=[];return n[0]=r(t[0],e[0]),n[1]=r(t[1],e[1]),n[2]=r(t[2],e[2]),n}};Qt.normal=re(te(function(r){return r})),Qt.multiply=re(te(function(r,t){return r*t/255})),Qt.screen=re(te(function(r,t){return 255*(1-(1-r/255)*(1-t/255))})),Qt.overlay=re(te(function(r,t){return t<128?2*r*t/255:255*(1-2*(1-r/255)*(1-t/255))})),Qt.darken=re(te(function(r,t){return r>t?t:r})),Qt.lighten=re(te(function(r,t){return r>t?r:t})),Qt.dodge=re(te(function(r,t){return 255===r?255:(r=t/255*255/(1-r/255))>255?255:r})),Qt.burn=re(te(function(r,t){return 255*(1-(1-t/255)/(r/255))}));for(var ee=Qt,ne=u.type,ae=u.clip_rgb,fe=u.TWOPI,oe=Math.pow,ue=Math.sin,ce=Math.cos,ie=Math.floor,le=Math.random,se=Math.log,he=Math.pow,de=Math.floor,be=Math.abs,pe=function(r,t){void 0===t&&(t=null);var e={min:Number.MAX_VALUE,max:-1*Number.MAX_VALUE,sum:0,values:[],count:0};return"object"===f(r)&&(r=Object.values(r)),r.forEach(function(r){t&&"object"===f(r)&&(r=r[t]),null==r||isNaN(r)||(e.values.push(r),e.sum+=r,r<e.min&&(e.min=r),r>e.max&&(e.max=r),e.count+=1)}),e.domain=[e.min,e.max],e.limits=function(r,t){return ge(e,r,t)},e},ge=function(r,t,e){void 0===t&&(t="equal"),void 0===e&&(e=7),"array"==f(r)&&(r=pe(r));var n=r.min,a=r.max,o=r.values.sort(function(r,t){return r-t});if(1===e)return[n,a];var u=[];if("c"===t.substr(0,1)&&(u.push(n),u.push(a)),"e"===t.substr(0,1)){u.push(n);for(var c=1;c<e;c++)u.push(n+c/e*(a-n));u.push(a)}else if("l"===t.substr(0,1)){if(n<=0)throw new Error("Logarithmic scales are only possible for values > 0");var i=Math.LOG10E*se(n),l=Math.LOG10E*se(a);u.push(n);for(var s=1;s<e;s++)u.push(he(10,i+s/e*(l-i)));u.push(a)}else if("q"===t.substr(0,1)){u.push(n);for(var h=1;h<e;h++){var d=(o.length-1)*h/e,b=de(d);if(b===d)u.push(o[b]);else{var p=d-b;u.push(o[b]*(1-p)+o[b+1]*p)}}u.push(a)}else if("k"===t.substr(0,1)){var g,v=o.length,m=new Array(v),y=new Array(e),w=!0,k=0,M=null;(M=[]).push(n);for(var N=1;N<e;N++)M.push(n+N/e*(a-n));for(M.push(a);w;){for(var _=0;_<e;_++)y[_]=0;for(var x=0;x<v;x++)for(var A=o[x],O=Number.MAX_VALUE,P=void 0,j=0;j<e;j++){var C=be(M[j]-A);C<O&&(O=C,P=j),y[P]++,m[x]=P}for(var E=new Array(e),S=0;S<e;S++)E[S]=null;for(var F=0;F<v;F++)g=m[F],null===E[g]?E[g]=o[F]:E[g]+=o[F];for(var G=0;G<e;G++)E[G]*=1/y[G];w=!1;for(var q=0;q<e;q++)if(E[q]!==M[q]){w=!0;break}M=E,++k>200&&(w=!1)}for(var L={},R=0;R<e;R++)L[R]=[];for(var I=0;I<v;I++)g=m[I],L[g].push(o[I]);for(var B=[],D=0;D<e;D++)B.push(L[D][0]),B.push(L[D][L[D].length-1]);B=B.sort(function(r,t){return r-t}),u.push(B[0]);for(var Y=1;Y<B.length;Y+=2){var T=B[Y];isNaN(T)||-1!==u.indexOf(T)||u.push(T)}}return u},ve={analyze:pe,limits:ge},me=Math.sqrt,ye=Math.atan2,we=Math.abs,ke=Math.cos,Me=Math.PI,Ne={cool:function(){return Kt([p.hsl(180,1,.9),p.hsl(250,.7,.4)])},hot:function(){return Kt(["#000","#f00","#ff0","#fff"]).mode("rgb")}},_e={OrRd:["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"],PuBu:["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"],BuPu:["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"],Oranges:["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"],BuGn:["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"],YlOrBr:["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"],YlGn:["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"],Reds:["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"],RdPu:["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"],Greens:["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"],YlGnBu:["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"],Purples:["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"],GnBu:["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"],Greys:["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"],YlOrRd:["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"],PuRd:["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"],Blues:["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"],PuBuGn:["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"],Viridis:["#440154","#482777","#3f4a8a","#31678e","#26838f","#1f9d8a","#6cce5a","#b6de2b","#fee825"],Spectral:["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],RdYlGn:["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],RdBu:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],PiYG:["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],PRGn:["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],RdYlBu:["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],BrBG:["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],RdGy:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],PuOr:["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],Set2:["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"],Accent:["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"],Set1:["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"],Set3:["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"],Dark2:["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],Paired:["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"],Pastel2:["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"],Pastel1:["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]},xe=0,Ae=Object.keys(_e);xe<Ae.length;xe+=1){var Oe=Ae[xe];_e[Oe.toLowerCase()]=_e[Oe]}var Pe=_e;return p.average=function(r,t){void 0===t&&(t="lrgb");var e=r.length;if(r=r.map(function(r){return new d(r)}),"lrgb"===t)return Xt(r);for(var n=r.shift(),a=n.get(t),f=[],o=0,u=0,c=0;c<a.length;c++)if(a[c]=a[c]||0,f.push(isNaN(a[c])?0:1),"h"===t.charAt(c)&&!isNaN(a[c])){var i=a[c]/180*Vt;o+=$t(i),u+=Wt(i)}var l=n.alpha();r.forEach(function(r){var e=r.get(t);l+=r.alpha();for(var n=0;n<a.length;n++)if(!isNaN(e[n]))if(f[n]++,"h"===t.charAt(n)){var c=e[n]/180*Vt;o+=$t(c),u+=Wt(c)}else a[n]+=e[n]});for(var s=0;s<a.length;s++)if("h"===t.charAt(s)){for(var h=zt(u/f[s],o/f[s])/Vt*180;h<0;)h+=360;for(;h>=360;)h-=360;a[s]=h}else a[s]=a[s]/f[s];return l/=e,new d(a,t).alpha(l>.99999?1:l,!0)},p.bezier=function(r){var t=Jt(r);return t.scale=function(){return Kt(t)},t},p.blend=ee,p.cubehelix=function(r,t,e,n,a){void 0===r&&(r=300),void 0===t&&(t=-1.5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===a&&(a=[0,1]);var f,o=0;"array"===ne(a)?f=a[1]-a[0]:(f=0,a=[a,a]);var u=function(u){var c=fe*((r+120)/360+t*u),i=oe(a[0]+f*u,n),l=0!==o?e[0]+u*o:e,s=l*i*(1-i)/2,h=ce(c),d=ue(c),b=i+s*(-.14861*h+1.78277*d),g=i+s*(-.29227*h-.90649*d),v=i+s*(1.97294*h);return p(ae([255*b,255*g,255*v,1]))};return u.start=function(t){return null==t?r:(r=t,u)},u.rotations=function(r){return null==r?t:(t=r,u)},u.gamma=function(r){return null==r?n:(n=r,u)},u.hue=function(r){return null==r?e:("array"===ne(e=r)?0==(o=e[1]-e[0])&&(e=e[1]):o=0,u)},u.lightness=function(r){return null==r?a:("array"===ne(r)?(a=r,f=r[1]-r[0]):(a=[r,r],f=0),u)},u.scale=function(){return p.scale(u)},u.hue(e),u},p.mix=p.interpolate=Gt,p.random=function(){for(var r="#",t=0;t<6;t++)r+="0123456789abcdef".charAt(ie(16*le()));return new d(r,"hex")},p.scale=Kt,p.analyze=ve.analyze,p.contrast=function(r,t){r=new d(r),t=new d(t);var e=r.luminance(),n=t.luminance();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},p.deltaE=function(r,t,e,n){void 0===e&&(e=1),void 0===n&&(n=1),r=new d(r),t=new d(t);for(var a=Array.from(r.lab()),f=a[0],o=a[1],u=a[2],c=Array.from(t.lab()),i=c[0],l=c[1],s=c[2],h=me(o*o+u*u),b=me(l*l+s*s),p=f<16?.511:.040975*f/(1+.01765*f),g=.0638*h/(1+.0131*h)+.638,v=h<1e-6?0:180*ye(u,o)/Me;v<0;)v+=360;for(;v>=360;)v-=360;var m=v>=164&&v<=345?.56+we(.2*ke(Me*(v+168)/180)):.36+we(.4*ke(Me*(v+35)/180)),y=h*h*h*h,w=me(y/(y+1900)),k=g*(w*m+1-w),M=h-b,N=o-l,_=u-s,x=(f-i)/(e*p),A=M/(n*g);return me(x*x+A*A+(N*N+_*_-M*M)/(k*k))},p.distance=function(r,t,e){void 0===e&&(e="lab"),r=new d(r),t=new d(t);var n=r.get(e),a=t.get(e),f=0;for(var o in n){var u=(n[o]||0)-(a[o]||0);f+=u*u}return Math.sqrt(f)},p.limits=ve.limits,p.valid=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];try{return new(Function.prototype.bind.apply(d,[null].concat(r))),!0}catch(r){return!1}},p.scales=Ne,p.colors=ht,p.brewer=Pe,p}()},function(r,t,e){"use strict";function n(r){let t=new Array,e=new Array,n=r.length-1,a=new Array,f=new Array,o=new Array,u=new Array;a[0]=0,f[0]=2,o[0]=1,u[0]=r[0]+2*r[1];for(let t=1;t<n-1;t++)a[t]=1,f[t]=4,o[t]=1,u[t]=4*r[t]+2*r[t+1];a[n-1]=2,f[n-1]=7,o[n-1]=0,u[n-1]=8*r[n-1]+r[n];for(let r=1;r<n;r++){let t=a[r]/f[r-1];f[r]=f[r]-t*o[r-1],u[r]=u[r]-t*u[r-1]}t[n-1]=u[n-1]/f[n-1];for(let r=n-2;r>=0;--r)t[r]=(u[r]-o[r]*t[r+1])/f[r];for(let a=0;a<n-1;a++)e[a]=2*r[a+1]-t[a+1];return e[n-1]=.5*(r[n]+t[n-1]),{p1:t,p2:e}}e.r(t);var a=e(0),f=e.n(a);function o(r,t,e){return t in r?Object.defineProperty(r,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):r[t]=e,r}function u(r,t){for(var e=0;e<t.length;e++){var n=t[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,n.key,n)}}function c(r,t,e,a,f,o){for(var u=r.map(function(r){return r.x}),c=r.map(function(r){return r.y}),i=n(u),l=n(c),s="M ".concat(t.x,",").concat(t.y," ")+"C ".concat(t.x,",").concat(t.y," ")+"".concat(u[0],",").concat(c[0]," ")+"".concat(u[0],",").concat(c[0]," "),h=0;h<u.length-1;h++)s+="C ".concat(i.p1[h],",").concat(l.p1[h]," ")+"".concat(i.p2[h],",").concat(l.p2[h]," ")+"".concat(u[h+1],",").concat(c[h+1]," ");s+="C ".concat(u[u.length-1],",").concat(c[u.length-1]," ")+"".concat(e.x,",").concat(e.y," ")+"".concat(e.x,",").concat(e.y," Z");var d=document.createElementNS("http://www.w3.org/2000/svg","path");return d.setAttributeNS(null,"fill",a),d.setAttributeNS(null,"stroke",f),d.setAttributeNS(null,"stroke-width",o),d.setAttributeNS(null,"d",s),d}e.d(t,"default",function(){return l});var i={width:800,height:600,segmentCount:20,layerCount:10,variance:.75,strokeWidth:0,strokeColor:"none",gradientColors:[{colorValue:"yellow",position:0},{colorValue:"red",position:.5},{colorValue:"navy",position:1}]},l=function(){function r(t){!function(r,t){if(!(r instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.options=function(r){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{},n=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(e).filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.forEach(function(t){o(r,t,e[t])})}return r}({},i,{},t),this.points=function(r,t,e,n,a){for(var f=r/e,o=t/n,u=f*a*.5,c=o*a,i=[],l=o;l<t;l+=o){i.push({x:0,y:Math.floor(l)});for(var s=f;s<r;s+=f){var h=l-c/2+Math.random()*c,d=s-u/2+Math.random()*u;i.push({x:Math.floor(d),y:Math.floor(h)})}i.push({x:r,y:l})}return i}(this.options.width,this.options.height,this.options.segmentCount,this.options.layerCount,this.options.variance)}var t,e,n;return t=r,(e=[{key:"generateSvg",value:function(){var r=this,t=document.createElementNS("http://www.w3.org/2000/svg","svg");t.setAttribute("width",this.options.width),t.setAttribute("height",this.options.height),t.setAttribute("xmlns","http://www.w3.org/2000/svg");for(var e=f.a.scale(this.options.gradientColors.map(function(r){return r.colorValue})).domain(this.options.gradientColors.map(function(t){return t.position*(r.points.length-r.options.segmentCount-1)})),n=0,a=this.points.length;n<a;n+=this.options.segmentCount+1){var o=this.points.slice(n,n+this.options.segmentCount+1);t.appendChild(c(o,{x:0,y:this.options.height},{x:this.options.width,y:this.options.height},e(n),this.options.strokeColor,this.options.strokeWidth))}return t}}])&&u(t.prototype,e),n&&u(t,n),r}()}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,